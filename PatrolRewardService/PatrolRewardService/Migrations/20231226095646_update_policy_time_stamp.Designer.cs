// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatrolRewardService;

#nullable disable

namespace PatrolRewardService.Migrations
{
    [DbContext(typeof(RewardDbContext))]
    [Migration("20231226095646_update_policy_time_stamp")]
    partial class update_policy_time_stamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatrolRewardService.Models.AvatarModel", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasColumnType("text")
                        .HasColumnName("avatar_address");

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agent_address");

                    b.Property<int>("ClaimCount")
                        .HasColumnType("integer")
                        .HasColumnName("claim_count");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastClaimedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_claimed_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.HasKey("AvatarAddress")
                        .HasName("pk_avatars");

                    b.ToTable("avatars", (string)null);
                });

            modelBuilder.Entity("PatrolRewardService.Models.ClaimModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("policy_id");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("AvatarAddress")
                        .HasDatabaseName("ix_claims_avatar_address");

                    b.HasIndex("PolicyId")
                        .HasDatabaseName("ix_claims_policy_id");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("PatrolRewardService.Models.GarageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("claim_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_id");

                    b.HasKey("Id")
                        .HasName("pk_garages");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_garages_claim_id");

                    b.HasIndex("RewardId")
                        .HasDatabaseName("ix_garages_reward_id");

                    b.ToTable("garages", (string)null);
                });

            modelBuilder.Entity("PatrolRewardService.Models.RewardBaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PerInterval")
                        .HasColumnType("integer")
                        .HasColumnName("per_interval");

                    b.Property<TimeSpan>("RewardInterval")
                        .HasColumnType("interval")
                        .HasColumnName("reward_interval");

                    b.Property<string>("reward_type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_type");

                    b.HasKey("Id")
                        .HasName("pk_rewards");

                    b.ToTable("rewards", (string)null);

                    b.HasDiscriminator<string>("reward_type").HasValue("RewardBaseModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PatrolRewardService.Models.RewardPolicyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activate")
                        .HasColumnType("boolean")
                        .HasColumnName("activate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<bool>("Free")
                        .HasColumnType("boolean")
                        .HasColumnName("free");

                    b.Property<int?>("MaxLevel")
                        .HasColumnType("integer")
                        .HasColumnName("max_level");

                    b.Property<int>("MinimumLevel")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_level");

                    b.Property<TimeSpan>("MinimumRequiredInterval")
                        .HasColumnType("interval")
                        .HasColumnName("minimum_required_interval");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.HasKey("Id")
                        .HasName("pk_reward_policies");

                    b.ToTable("reward_policies", (string)null);
                });

            modelBuilder.Entity("PatrolRewardService.Models.TransactionModel", b =>
                {
                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_address");

                    b.Property<int>("ClaimCount")
                        .HasColumnType("integer")
                        .HasColumnName("claim_count");

                    b.Property<int>("ClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExceptionName")
                        .HasColumnType("text")
                        .HasColumnName("exception_name");

                    b.Property<int?>("Gas")
                        .HasColumnType("integer")
                        .HasColumnName("gas");

                    b.Property<long?>("GasLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("gas_limit");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint")
                        .HasColumnName("nonce");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.HasKey("TxId")
                        .HasName("pk_transactions");

                    b.HasAlternateKey("Nonce")
                        .HasName("ak_transactions_nonce");

                    b.HasIndex("AvatarAddress")
                        .HasDatabaseName("ix_transactions_avatar_address");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_transactions_claim_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("RewardBaseModelRewardPolicyModel", b =>
                {
                    b.Property<int>("RewardPoliciesId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_policies_id");

                    b.Property<int>("RewardsId")
                        .HasColumnType("integer")
                        .HasColumnName("rewards_id");

                    b.HasKey("RewardPoliciesId", "RewardsId")
                        .HasName("pk_reward_base_model_reward_policy_model");

                    b.HasIndex("RewardsId")
                        .HasDatabaseName("ix_reward_base_model_reward_policy_model_rewards_id");

                    b.ToTable("reward_base_model_reward_policy_model", (string)null);
                });

            modelBuilder.Entity("PatrolRewardService.Models.FungibleAssetValueRewardModel", b =>
                {
                    b.HasBaseType("PatrolRewardService.Models.RewardBaseModel");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasDiscriminator().HasValue("fav");
                });

            modelBuilder.Entity("PatrolRewardService.Models.FungibleItemRewardModel", b =>
                {
                    b.HasBaseType("PatrolRewardService.Models.RewardBaseModel");

                    b.Property<string>("FungibleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fungible_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.HasDiscriminator().HasValue("item");
                });

            modelBuilder.Entity("PatrolRewardService.Models.ClaimModel", b =>
                {
                    b.HasOne("PatrolRewardService.Models.AvatarModel", "Avatar")
                        .WithMany("Claims")
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_claims_avatars_avatar_address1");

                    b.HasOne("PatrolRewardService.Models.RewardPolicyModel", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_claims_reward_policies_policy_id");

                    b.Navigation("Avatar");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("PatrolRewardService.Models.GarageModel", b =>
                {
                    b.HasOne("PatrolRewardService.Models.ClaimModel", "Claim")
                        .WithMany("Garages")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garages_claims_claim_id");

                    b.HasOne("PatrolRewardService.Models.RewardBaseModel", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garages_rewards_reward_id");

                    b.Navigation("Claim");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("PatrolRewardService.Models.TransactionModel", b =>
                {
                    b.HasOne("PatrolRewardService.Models.AvatarModel", "Avatar")
                        .WithMany("TransactionModels")
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_avatars_avatar_address1");

                    b.HasOne("PatrolRewardService.Models.ClaimModel", "Claim")
                        .WithMany("Transactions")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_claims_claim_id");

                    b.Navigation("Avatar");

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("RewardBaseModelRewardPolicyModel", b =>
                {
                    b.HasOne("PatrolRewardService.Models.RewardPolicyModel", null)
                        .WithMany()
                        .HasForeignKey("RewardPoliciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reward_base_model_reward_policy_model_reward_policies_rewar");

                    b.HasOne("PatrolRewardService.Models.RewardBaseModel", null)
                        .WithMany()
                        .HasForeignKey("RewardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reward_base_model_reward_policy_model_rewards_rewards_id");
                });

            modelBuilder.Entity("PatrolRewardService.Models.AvatarModel", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("TransactionModels");
                });

            modelBuilder.Entity("PatrolRewardService.Models.ClaimModel", b =>
                {
                    b.Navigation("Garages");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PatrolRewardService.Models.RewardPolicyModel", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
